<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display Properties

// Reset display, and set aa and vsync
display_reset(0, false);

// Instantiate variables
zoom = 2;
max_zoom = 1;

// Get display resolution
display_width = display_get_width();
display_height = display_get_height();

// Set aspect ratio
aspect_ratio = display_width/display_height;
aspect_ratio = clamp(aspect_ratio, 16/10, 21/9);  // Clamp to ratio between 1.6 and 2.33

// Set base resolution
base_height = 540;
base_width = round(base_height*aspect_ratio);     // When using static HEIGHT and adjusting width (preferred option)
//base_height=round(base_width / aspect_ratio);   // When using static WIDTH and adjusting width (not preferred option)

//Perfect pixel scaling
if(display_width mod base_width != 0) {
    var d = round(display_width/base_width);       // Divide display_width by base_width and round to nearest whole number multiplier
    base_width = display_width/d;                  // then set base_width to that multiple
}
if(display_height mod base_height != 0) {          // Same with height
    var d = round(display_height/base_height);
    base_height = display_height/d;
}

//Check for odd numbers using bitwise operator
if(base_width &amp; 1)                                 // If idea_width is odd returns 1, even returns 0
    base_width++;                                  // if odd, add 1 to base_width
if(base_height &amp; 1)                                // Same for height
    base_height++;
    
//Calculate max zoom
max_zoom = floor(display_width/base_width);        // Make sure max zoom resolution is a whole number multiple of the display resolution

// Set the window size
window_set_size(base_width*zoom,base_height*zoom);// I added *zoom to make it start at zoom=2 (for bigger window). was just base_width, base_height

// Set the Application Surface size
surface_resize(application_surface,base_width*zoom,base_height*zoom);

// Set the GUI Size to same resolution as Application Surface
display_set_gui_size(-1,-1);

// Recenter window after initial resizing
alarm[0] = 1;

// Setup view for every room
for(var i=1; i&lt;=room_last; i++) {                   // Skip room[0] because this code is running in it (room[0] = _display_init)
    if(room_exists(i)) {
        room_set_view(i,0,true,0,0,base_width,base_height,0,0,base_width,base_height,0,0,0,0,-1);   // This function is in the online help, but middle-click doesn't work
        room_set_view_enabled(i,true);
    }
}

// Got to next room
room_goto(room_next(room));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delayed Surface resize
surface_resize(application_surface,base_width*zoom,base_height*zoom);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Center window

// Alarm necessary because window_center must be 1 step behind window resizing
window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Zoom window
if(keyboard_check_pressed(ord("Z")))
{
  zoom++;
  
  if(zoom &gt; max_zoom)
    zoom = 1;
  
  window_set_size(base_width*zoom,base_height*zoom);
  surface_resize(application_surface,base_width*zoom,base_height*zoom); // Performance hit: consider using half the ratio to window size
  alarm[0] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_normal);
draw_set_color(c_white);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_text(5,5,display_write_specs(display.screen)+"#"+
              display_write_specs(display.window)+"#"+
              display_write_specs(display.app_surface)+"#"+
              display_write_specs(display.view)+"#"+
              display_write_specs(display.port)+"#"+
              display_write_specs(display.gui)
              );

draw_set_halign(fa_right);
draw_set_valign(fa_bottom);
draw_text(display_get_gui_width()-5,display_get_gui_height()-5,"Bottom Right");

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
