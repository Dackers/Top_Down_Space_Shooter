<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_torpedo</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Torpedo

/* Stats */
damage = 4;
spd = 6;
turn_speed = 5;

/* For Tracking */
e = 0; //This is the variable that is to hold the enemy the bullet will home on...
track = false; //for switching on homing...
alarm[1] = room_speed/5; //Alarm for switching the homing variable...

/* Torpedo Particle System */
TorpedoPartSystem = part_system_create();
part_system_depth(TorpedoPartSystem,0);

TorpedoPart = part_type_create();
part_type_shape(TorpedoPart,pt_shape_spark);
part_type_scale(TorpedoPart,1,1);
part_type_size(TorpedoPart,0.80,1.20,0,0.03);
part_type_color3(TorpedoPart,20724,255,221);
part_type_alpha1(TorpedoPart,1);
part_type_speed(TorpedoPart,1,1,0,0);
part_type_direction(TorpedoPart,0,0,0,0);
part_type_orientation(TorpedoPart,0,359,0.30,0.10,1);
part_type_blend(TorpedoPart,1);
part_type_life(TorpedoPart,room_speed/30,room_speed/30);
part_type_gravity(TorpedoPart,0,0);

/* Torpedo Audio */
emTorpedoSound = audio_emitter_create();
audio_listener_orientation(other.x,other.y,0,0,0,0)
audio_listener_position(other.x,other.y,0);
audio_play_sound_on(emTorpedoSound,snd_torpedo,false,2);

/* Misc */
decay = room_speed*3;
alarm[0] = decay; //Alarm for destroying the instance...
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleanup
part_system_destroy(TorpedoPartSystem);
audio_emitter_free(emTorpedoSound);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn on tracking

//switches on tracking and makes speed 0 as we are now using move_towards_point...
track = true;
//speed=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Decay and destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Audio and Particle Update
/* Particles */
part_particles_create(TorpedoPartSystem,x,y,TorpedoPart,1)

/* Audio */
audio_emitter_position(emTorpedoSound,x,y,0);

/* Destroy Torpedo
//Destroy when off screen
if x&gt;room_width+32 or x&lt;-32 or y&lt;-32 or y&gt;room_height+32
{
    instance_destroy();
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move towards tracked object
if instance_exists(obj_player.e_cur)
{
    e = obj_player.e_cur;
}

if track = true
{
    if instance_exists(e) &amp;&amp; e!=0  //Makes sure the enemy instance still exists...
    {
        direction = (direction+(sin(degtorad(point_direction(x,y,e.x,e.y)-direction))*turn_speed));
    }
    else 
    {
        var near; //A temp variable...
        near = instance_nearest(x,y,obj_enemy); //if the choosen enemy is destroyed, find the next nearest...
        if (distance_to_object(near) &lt; obj_player.sensor_radius) { e = near; }
    }
}
else
{
    speed = spd; //Sets the speed for when no enemy is being homed in on...
}

image_angle += 30; //Makes the sprite rotate...
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//checks to see if the collision is with the targeted enemy,
//and if it is destroys that enemy...

if other.id == e
{
with (other)
    {
    //effect_create_above(ef_explosion,x,y,1,image_blend);
    instance_destroy();
    }
instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
