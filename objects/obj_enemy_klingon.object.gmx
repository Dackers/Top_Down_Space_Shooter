<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy_ship01</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables

/* STATS */
//Name
name                = "Ziwth K-5"

//Engines
impulse_speed       = 1;
max_speed           = 4;
rotate              = 1;
ease_turn_rate      = .5;
turn_dir            = 0;
can_turn            = true;
boost_rotate        = 1;
boosting            = true;
friction            = 0.2;
flame_offsetX       = -30;
flame_offsetY       = 1;

//Weapons
// _Phasers
phaser_damage       = 1;
phaser_fire_rate    = room_speed/9.25;
phaser_angle        = 10;
can_shoot           = true;
target              = obj_player;
burst_count         = 0;
num_phasers         = 2;
phaser_array[0,0]   = 45; //62; //x offset coordinate of first gun
phaser_array[0,1]   = -15; //y offset coordinate of first gun
phaser_array[1,0]   = 45; //62; //x offset coordinate of second gun
phaser_array[1,1]   = 15;  //y offset coordinate of second gun
phaser_color        = 0;
phaser_knockback    = 2;
// -Torpedos
torpedo_fire_rate   = room_speed/1.5;
can_shoot_torpedo   = true;
num_torpedos        = 1;
torpedo_array[0,0]  = 30;
torpedo_array[0,1]  = 0;
torpedo_color       = make_colour_rgb(255, 0, 0)

//Shields
max_shields         = 10;
shields             = max_shields;
regen_rate          = 1/room_speed; //(1 per second)

//HPs
max_hp              = 40;
hp                  = max_hp;

//Misc
sensor_radius       = 300;
current_direction   = irandom(360);
last_direction      = current_direction;
alarm[2]            = irandom_range(room_speed, room_speed*10);
image_index         = 0;
image_speed         = 0;
image_angle         = irandom(180)*2;
image_xscale        = .25;
image_yscale        = image_xscale;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Death sound
var snd = audio_play_sound(snd_enemy_destroy,6,false);
audio_sound_gain(snd,.3,0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death explosion
instance_create(x, y, obj_explosion);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///burst_count

burst_count = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change boosting pattern
if (boosting)
{
    if (random(100) &lt; 20)
    {
        boosting = false;
    }
    else
    {
        boosting = true;
    }
}
else
{
    boosting = true;
}
if (boosting)
{
    alarm[2] = irandom_range(room_speed, room_speed*10);
}
else
{
    alarm[2] = irandom_range(room_speed/2, room_speed*2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fire Torpedos
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fire Phasers
can_shoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Limit speed
speed = min(1, max_speed);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move and Shoot

//Boosting
if (boosting)
{
    motion_add(image_angle, impulse_speed);
    var rot = boost_rotate;
    //instance_create(x, y, objTrail);
    
    // ********Create Thrust Flame
}
else
{
    var rot = rotate;
}

if (instance_exists(target))
{
    //Turning
    var target_angle = point_direction(x, y, target.x, target.y);
    // ********Set Banking Animation
    //show_debug_message(target_angle);
    image_angle = angle_approach(image_angle, target_angle, rot);

    //Firing
    if (distance_to_object(target) &lt; sensor_radius)
    if (abs(target_angle-image_angle) &lt; phaser_angle)
    if (can_shoot and burst_count &lt; 7)
    {
        burst_count++;
        if (burst_count &gt;= 7)
        {
            alarm[3] = random_range(room_speed/2, room_speed *2);
        }
        can_shoot = false;
        alarm[0] = phaser_fire_rate;
        scr_fire_phasers(phaser_array, phaser_color);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
